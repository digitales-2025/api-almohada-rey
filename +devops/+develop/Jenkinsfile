pipeline {
	agent any
	environment {
		BUILD_REF = sh(script: "echo -n '${BUILD_TAG}' | sha256sum | cut -c1-12", returnStdout: true).trim()

		PROJECT_NAME    = "almohada"
		PROJECT_SERVICE = "unset"  // MUST BE SPECIFIED
		PROJECT_STAGE   = "develop"
		PROJECT_TRIPLET = "..." // MUST BE SPECIFIED

		REMOTE_USER   = "docker_admin"
		REMOTE_IP     = "116.203.105.37"
		REMOTE_FOLDER = "/opt/docker/compose/projects/${PROJECT_NAME}-${PROJECT_STAGE}/"

		REGISTRY_CREDENTIALS = "dockerhub-digitalesacide-credentials"
		REGISTRY_URL         = "docker.io"
		REGISTRY_USER        = "digitalesacide"
		FULL_REGISTRY_URL    = "..." // MUST BE SPECIFIED

		// SSH credentials
		SSH_CRED = "ssh-id_docker_admin"

		// ansible variables
		PROJECT_SERVICES  = "backend,frontend,landing"  // Comma-separated list
	}
	stages {
		stage("Create ansible inventory") {
			steps {
				dir ("+devops/+$PROJECT_STAGE") {
					writeFile(file: "inventory.yml", text: """
ungrouped:
  hosts:
    ${REMOTE_IP}:
      ansible_user: ${REMOTE_USER}
""")
				}
			}
		}
		stage("Build & Push") {
			parallel {
				stage("frontend") {
					environment {
						PROJECT_SERVICE   = "frontend"
						PROJECT_TRIPLET   = "${PROJECT_NAME}-${PROJECT_SERVICE}-${PROJECT_STAGE}"
						FULL_REGISTRY_URL = "${REGISTRY_URL}/${REGISTRY_USER}/${PROJECT_TRIPLET}"
					}
					stages {
						stage("Build & Push") {
							steps {
								script {
									withDockerRegistry(credentialsId: "${REGISTRY_CREDENTIALS}") {
										def image = docker.build("${FULL_REGISTRY_URL}:${BUILD_REF}", "-f +devops/docker/Dockerfile .")
										image.push()
									}
								}
							}
						}
						stage("Fetch image at server") {
							steps {
								dir ("+devops/+$PROJECT_STAGE") {
									ansiblePlaybook(
										credentialsId: SSH_CRED,
										inventory: "inventory.yml",
										playbook: "../ansible/service_pull_and_setup.yml",
										vaultCredentialsId: "ansible-vault-almohada-key",
										extras: "--extra-vars '@vault.yml'",
										extraVars: [
											remote_folder: REMOTE_FOLDER,
											image_tag: BUILD_REF,
											full_registry_url: FULL_REGISTRY_URL,
											project_name: PROJECT_NAME,
											project_stage: PROJECT_STAGE,
										],
									)
								}
							}
						}
					}
					post {
						always {
							sh "docker rmi ${FULL_REGISTRY_URL}:${BUILD_REF} || true"
						}
					}
				}
				stage("Setup target") {
					steps {
						dir ("+devops") {
							ansiblePlaybook(
								credentialsId: SSH_CRED,
								inventory: "inventory.yml",
								playbook: "../ansible/setup_target.yml",
								extraVars: [
									remote_folder: REMOTE_FOLDER,
									project_name: PROJECT_NAME,
									project_stage: PROJECT_STAGE,
								],
							)
						}
					}
				}
			}
		}
		stage("Up services") {
			steps {
				dir ("+devops") {
					ansiblePlaybook(
						credentialsId: SSH_CRED,
						inventory: "inventory.yml",
						playbook: "../ansible/start_service.yml",
						extraVars: [
							remote_folder_path: REMOTE_FOLDER,
							project_services: PROJECT_SERVICES
							project_stage: PROJECT_STAGE,
							project_service: PROJECT_SERVICE,
						],
					)
				}
			}
		}
	}
}

