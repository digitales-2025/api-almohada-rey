generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @unique @default(uuid())
  name               String
  userRol            UserRolType
  email              String
  password           String
  phone              String?
  isSuperAdmin       Boolean     @default(false)
  lastLogin          DateTime    @default(now()) @db.Timestamptz(6)
  isActive           Boolean     @default(true)
  mustChangePassword Boolean     @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con auditorías (acciones realizadas por este usuario)
  auditsPerformed Audit[] @relation("AuditPerformedBy")

  @@unique([email, isActive])
}

enum UserRolType {
  ADMIN
  RECEPCIONIST
}

model Audit {
  id            String          @id @unique @default(uuid())
  entityId      String
  entityType    String // Representa el nombre del modelo (ej: User, Rol, etc.)
  action        AuditActionType // Representa la acción (CREATE, UPDATE, DELETE)
  performedBy   User            @relation("AuditPerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
  REACTIVATE
  UPDATE_STATUS
}

model Customer {
  id             String                @id @default(uuid())
  name           String
  address        String
  birthPlace     String
  country        String
  department     String?
  province       String?
  phone          String
  occupation     String
  documentType   CustomerDocumentType
  documentNumber String                @unique
  email          String                @unique
  maritalStatus  CustomerMaritalStatus
  companyName    String?
  ruc            String?               @unique
  companyAddress String?
  isActive       Boolean               @default(true)
  createdAt      DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime              @updatedAt
}

enum CustomerDocumentType {
  DNI
  PASSPORT
  FOREIGNER_CARD
}

enum CustomerMaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum FloorTypes {
  LIMINATING
  CARPETING
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  CLEANING
}

enum RoomTypes {
  SINGLE
  DOUBLE_SINGLE
  DOUBLE_FAMILY
  SUITE
  MATRIMONIAL
}

model Room {
  id          String     @id @default(uuid())
  number      Int        @unique
  guests      Int
  type        RoomTypes
  price       Float
  status      RoomStatus
  tv          String
  floorType   FloorTypes
  description String
  area        Float
  bed         String
  isActive    Boolean    @default(true)

  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt
  ImageRoom         ImageRoom[]
  CleaningChecklist CleaningChecklist[] //aun no considerar
}

model ImageRoom {
  id       String  @id @default(uuid())
  imageUrl String
  isMain   Boolean @default(false)
  room     String
  rooms    Room    @relation(fields: [room], references: [id])
  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model CleaningChecklist {
  id           Int     @id @default(autoincrement())
  date String
  roomId       String // ID of room (Habitación)
  Room         Room    @relation(fields: [roomId], references: [id])

  staffName    String // ID of cleaning staff (Personal)
  userCheckId  String // ID of user who verifies (UserCheck)
  observations String? // Observations or comments (Observaciones)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model RoomType {
    id          String     @id @default(uuid())
  guests      Int
  price       Float
  tv          String
  floorType   FloorTypes
  description String
  area        Float
  bed         String

// relacion con room images

  isActive    Boolean    @default(true)

  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt
}

model Room_Oficial {
  id          String     @id @default(uuid())
  number      Int        @unique
  status      RoomStatus

  isActive    Boolean    @default(true)

    trashBin     Boolean  @default(true) // Trash bin (Tacho)
  towel        Boolean  @default(true) // Towel (Toalla)
  toiletPaper  Boolean  @default(true) // Toilet paper (Papel higiénico)
  showerSoap   Boolean  @default(true) // Shower soap (Jabón de ducha)
  handSoap     Boolean  @default(true) // Hand soap (Jabón de lavado)
  lamp         Boolean  @default(true) // Lamp (Lámpara)

  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt
  CleaningChecklist CleaningChecklist[] //aun no considerar
}